package main

import (
	"encoding/json"
	"flag"
	"net"
	"net/http"
	"os"
	"regexp"
	"time"

	"github.com/teambition/gear"
	"github.com/teambition/gear/logging"
	"github.com/teambition/gear/middleware/favicon"
	"github.com/wangtuanjie/ip17mon"
)

var (
	portReg  = regexp.MustCompile(`^\d+$`)
	port     = flag.String("port", "8080", `Server port.`)
	dataPath = flag.String("data", "", "IP data file path.")
)

type result struct {
	IP      string
	Status  int
	Message string
	Data    interface{}
}

func jsonAPI(ctx *gear.Context) error {
	var ip net.IP
	var res result

	callback := ctx.Query("callback")
	ipStr := ctx.Param("ip")
	if ipStr == "" {
		ip = ctx.IP()
	} else {
		ip = net.ParseIP(ipStr)
	}

	if ip == nil {
		res = result{IP: "", Status: http.StatusBadRequest, Message: "Invalid IP format"}
	} else {
		loc, err := ip17mon.Find(ip.String())
		if err != nil {
			res = result{IP: ip.String(), Status: http.StatusNotFound, Message: err.Error()}
		} else {
			res = result{IP: ip.String(), Status: http.StatusOK, Data: loc}
		}
	}

	if callback == "" {
		return ctx.JSON(res.Status, res)
	}
	return ctx.JSONP(res.Status, callback, res)
}

func home(ctx *gear.Context) error {
	log := logging.FromCtx(ctx)
	log.Reset() // Reset log, don't logging for home request.

	return ctx.HTML(200, `
<h1>IP Service</h1>
<p>Source Code: <a href="https://github.com/zensh/ipservice">github.com/zensh/ipservice</a></p>
<p>IP Database: <a href="http://www.ipip.net/about.html">IPIP.net</a></p>
<p>Query Demo: <a href="/json/8.8.8.8">IP: 8.8.8.8</a></p>`)
}

func main() {
	flag.Parse()

	if portReg.MatchString(*port) {
		*port = ":" + *port
	}
	if *port == "" || *dataPath == "" {
		flag.PrintDefaults()
		os.Exit(1)
	}

	// init IP db
	err := ip17mon.Init(*dataPath)
	if err != nil {
		panic(err)
	}

	// start app
	app := gear.New()
	app.Use(favicon.NewWithIco(faviconData))

	logger := logging.New(os.Stdout)
	logger.SetLogConsume(func(log logging.Log, _ *gear.Context) {
		now := time.Now()
		delete(log, "Start")
		delete(log, "Type")
		switch res, err := json.Marshal(log); err == nil {
		case true:
			logger.Output(now, logging.InfoLevel, string(res))
		default:
			logger.Output(now, logging.WarningLevel, err.Error())
		}
	})
	app.UseHandler(logger)

	router := gear.NewRouter()
	router.Get("/json/:ip", jsonAPI)
	router.Otherwise(home)
	app.UseHandler(router)

	logging.Info("IP Service start " + *port)
	app.Error(app.Listen(*port))
}

var faviconData = []byte{0, 0, 1, 0, 1, 0, 16, 16, 0, 0, 1, 0, 32, 0, 104, 4, 0, 0, 22, 0, 0, 0, 40, 0, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 1, 0, 32, 0, 0, 0, 0, 0, 0, 4, 0, 0, 19, 11, 0, 0, 19, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 248, 248, 248, 255, 236, 236, 236, 255, 239, 239, 239, 255, 253, 253, 253, 255, 254, 254, 254, 255, 240, 240, 240, 255, 236, 236, 236, 255, 245, 245, 245, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 170, 170, 170, 255, 43, 43, 43, 255, 71, 71, 71, 255, 231, 231, 231, 255, 242, 242, 242, 255, 84, 84, 84, 255, 41, 41, 41, 255, 144, 144, 144, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 151, 151, 151, 255, 0, 0, 0, 255, 30, 30, 30, 255, 226, 226, 226, 255, 238, 238, 238, 255, 46, 46, 46, 255, 0, 0, 0, 255, 119, 119, 119, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 151, 151, 151, 255, 0, 0, 0, 255, 30, 30, 30, 255, 226, 226, 226, 255, 239, 239, 239, 255, 46, 46, 46, 255, 0, 0, 0, 255, 120, 120, 120, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 151, 151, 151, 255, 0, 0, 0, 255, 30, 30, 30, 255, 226, 226, 226, 255, 239, 239, 239, 255, 46, 46, 46, 255, 0, 0, 0, 255, 106, 106, 106, 255, 229, 229, 229, 255, 227, 227, 227, 255, 231, 231, 231, 255, 246, 246, 246, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 151, 151, 151, 255, 0, 0, 0, 255, 30, 30, 30, 255, 226, 226, 226, 255, 239, 239, 239, 255, 46, 46, 46, 255, 0, 0, 0, 255, 15, 15, 15, 255, 32, 32, 32, 255, 32, 32, 32, 255, 37, 37, 37, 255, 72, 72, 72, 255, 173, 173, 173, 255, 251, 251, 251, 255, 255, 255, 255, 255, 255, 255, 255, 255, 151, 151, 151, 255, 0, 0, 0, 255, 30, 30, 30, 255, 226, 226, 226, 255, 239, 239, 239, 255, 46, 46, 46, 255, 0, 0, 0, 255, 18, 18, 18, 255, 38, 38, 38, 255, 37, 37, 37, 255, 19, 19, 19, 255, 0, 0, 0, 255, 17, 17, 17, 255, 177, 177, 177, 255, 255, 255, 255, 255, 255, 255, 255, 255, 151, 151, 151, 255, 0, 0, 0, 255, 30, 30, 30, 255, 226, 226, 226, 255, 239, 239, 239, 255, 46, 46, 46, 255, 0, 0, 0, 255, 108, 108, 108, 255, 234, 234, 234, 255, 231, 231, 231, 255, 203, 203, 203, 255, 57, 57, 57, 255, 0, 0, 0, 255, 86, 86, 86, 255, 250, 250, 250, 255, 255, 255, 255, 255, 151, 151, 151, 255, 0, 0, 0, 255, 30, 30, 30, 255, 226, 226, 226, 255, 239, 239, 239, 255, 46, 46, 46, 255, 0, 0, 0, 255, 120, 120, 120, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 121, 121, 121, 255, 0, 0, 0, 255, 57, 57, 57, 255, 240, 240, 240, 255, 255, 255, 255, 255, 151, 151, 151, 255, 0, 0, 0, 255, 30, 30, 30, 255, 226, 226, 226, 255, 239, 239, 239, 255, 46, 46, 46, 255, 0, 0, 0, 255, 115, 115, 115, 255, 249, 249, 249, 255, 246, 246, 246, 255, 221, 221, 221, 255, 69, 69, 69, 255, 0, 0, 0, 255, 79, 79, 79, 255, 248, 248, 248, 255, 255, 255, 255, 255, 151, 151, 151, 255, 0, 0, 0, 255, 30, 30, 30, 255, 226, 226, 226, 255, 238, 238, 238, 255, 46, 46, 46, 255, 0, 0, 0, 255, 29, 29, 29, 255, 63, 63, 63, 255, 60, 60, 60, 255, 34, 34, 34, 255, 1, 1, 1, 255, 9, 9, 9, 255, 163, 163, 163, 255, 255, 255, 255, 255, 255, 255, 255, 255, 159, 159, 159, 255, 16, 16, 16, 255, 47, 47, 47, 255, 228, 228, 228, 255, 240, 240, 240, 255, 62, 62, 62, 255, 16, 16, 16, 255, 17, 17, 17, 255, 15, 15, 15, 255, 15, 15, 15, 255, 19, 19, 19, 255, 50, 50, 50, 255, 150, 150, 150, 255, 248, 248, 248, 255, 255, 255, 255, 255, 255, 255, 255, 255, 236, 236, 236, 255, 209, 209, 209, 255, 215, 215, 215, 255, 250, 250, 250, 255, 252, 252, 252, 255, 218, 218, 218, 255, 209, 209, 209, 255, 209, 209, 209, 255, 209, 209, 209, 255, 209, 209, 209, 255, 213, 213, 213, 255, 236, 236, 236, 255, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
